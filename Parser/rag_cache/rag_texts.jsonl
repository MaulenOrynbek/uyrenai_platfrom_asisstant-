{"id": 1, "rag_text": "О чем этот курс? (страница 2)\nЭто начальный курс по Аналитике данных нацеленное на то чтобы помочь всем желающим сделать свой первый шаг в мир анализа данных. Главной целью курс перед собой ставит ознакомить и проложить перед вами дорогу на которую вы сможете ориентироваться в вашей профессиональной пути.\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 1 - Теория (1,5 - 2 часа)\", \"page\": 2, \"title\": \"О чем этот курс?\"}"}
{"id": 2, "rag_text": "О чем этот курс? (страница 2)\nПо окончанию курса вы узнаете: Чем занимается аналитик данных, и из каких этапов состоит его работа. Зачем нужен анализ данных, и хотите ли вы сами стать аналитиком. Базовые инструменты, а также все что требуется чтобы стать аналитиком. Получите практику и научитесь фундаментальным навыкам на начальном уровне.\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 1 - Теория (1,5 - 2 часа)\", \"page\": 2, \"title\": \"О чем этот курс?\"}"}
{"id": 3, "rag_text": "Чем занимается Аналитик Данных? (страница 3)\nОн анализирует данные, очевидно не так ли? А что это означает? А это уже интереснее. Так давайте же разберемся.\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 1 - Теория (1,5 - 2 часа)\", \"page\": 3, \"title\": \"Чем занимается Аналитик Данных?\"}"}
{"id": 4, "rag_text": "Чем занимается Аналитик Данных? (страница 3)\nПод словом анализировать данные, подразумевается целый набор разных умений и задач. Аналитик при получении данных и задачи должен сначала понять эти данные, а также саму задачу которую ему предстоит выполнить. Это первый этап - Знакомство с данными. При желании аналитик может задавать и уточнять вопросами, а иногда и менять формулировку задачи. Главная цель в этом этапе - максимально лучше понять данные и что нужно выявить с их помощью.\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 1 - Теория (1,5 - 2 часа)\", \"page\": 3, \"title\": \"Чем занимается Аналитик Данных?\"}"}
{"id": 5, "rag_text": "Дальше идет (страница 4)\nВторой этап - Подготовка данных. По моему мнению это самый важный этап, хотя, и предыдущий был немаловажен, суть тут в том, что тут легко ошибиться или о чем-то забыть. Если кратко, то вы должны очистить все данные от повторных данных, фильтровать ненужные данные, отсортировать по надобности, преобразовать типы данных под удобные форматы, создать новые преобразования с помощью формул и функций, например создать новое преобразование - плотность населения с помощью деления уже существующих данных о населении на площадь земли.\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 1 - Теория (1,5 - 2 часа)\", \"page\": 4, \"title\": \"Дальше идет\"}"}
{"id": 6, "rag_text": "Дальше идет (страница 4)\nГлавная цель - Подготовить все данные “чистыми” и “готовыми” к анализу, третьему этапу.\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 1 - Теория (1,5 - 2 часа)\", \"page\": 4, \"title\": \"Дальше идет\"}"}
{"id": 7, "rag_text": "Анализ данных (страница 5)\nТут как раз и начинается та работа, о которой многие и думают когда размышляют о работе аналитика. Тут вам предстоит проверять гипотезы, строить догадки, их опровергать, искать корреляции и паттерны, находить тренды, строить графики и таблицы, и на основе вышесказанного делать саммари выводы. Тут вам потребуются очень хорошие знания в сфере математики, особенно в статистике.\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 1 - Теория (1,5 - 2 часа)\", \"page\": 5, \"title\": \"Анализ данных\"}"}
{"id": 8, "rag_text": "Анализ данных (страница 5)\nГлавная цель - сделать хорошие рассуждение, разобрать все “Почему?”, найти паттерны, выявить тренды и прийти к выводу.\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 1 - Теория (1,5 - 2 часа)\", \"page\": 5, \"title\": \"Анализ данных\"}"}
{"id": 9, "rag_text": "Почему визуализация данных не отдельный этап (страница 6)\nХоть Визуализации играют огромную роль и делают свой немаловажный вклад в работе аналитика, отдельным этапом это не назвать. Причина проста - визуализации используется и может быть полезна везде, она используется почти во всех других этапах, кроме начального. Аналитики не строят визуалы именно после анализа или при презентации, визуалы могут строится и во время анализа, до анализа, после анализа, для презентации и т.д.\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 1 - Теория (1,5 - 2 часа)\", \"page\": 6, \"title\": \"Почему визуализация данных не отдельный этап\"}"}
{"id": 40, "rag_text": "Теперь попробуем совместить все наши знания\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 3 – SQL (1.5-2 часа)\", \"page\": 41, \"title\": \"Теперь попробуем совместить все наши знания\"}"}
{"id": 10, "rag_text": "Почему визуализация данных не отдельный этап (страница 6)\nПочему? Опять же просто - визуалы супер пупер полезные. Они помогают легко заметить тренды, корреляции, какие то важные изменения и т.д, а построить их легко.\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 1 - Теория (1,5 - 2 часа)\", \"page\": 6, \"title\": \"Почему визуализация данных не отдельный этап\"}"}
{"id": 11, "rag_text": "Четвертый этап - Оценка и моделирование\nЭто фактический суммирование всех предыдущих этапов, аналитик подводит итоги, рассматривает на недочеты, на упущения. Сравнивает выводы с бизнес целями. Подводит итоги по выводу и готовит рекомендации.\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 1 - Теория (1,5 - 2 часа)\", \"page\": 7, \"title\": \"Четвертый этап - Оценка и моделирование\"}"}
{"id": 12, "rag_text": "Если есть ошибки/какие то допущения, если есть возможности по времени желательно вернуться к предыдущим этапам и пройтись по их требованиям еще раз. Если задача требует постройку моделя, то аналитик тестирует и обучает модель.\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 1 - Теория (1,5 - 2 часа)\", \"page\": 7, \"title\": \"Четвертый этап - Оценка и моделирование\"}"}
{"id": 13, "rag_text": "Пятый этап. Аналитику нужно представить всю свою работу, его находки, выводы и рекомендации заказчикам. Для этого часто используются дэшборды. Если заказчик требует также может попросить внедрить в систему на практике все нововведения что предлагает аналитик, однако это уже другое.\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 1 - Теория (1,5 - 2 часа)\", \"page\": 8, \"title\": \"Презентация\"}"}
{"id": 14, "rag_text": "Есть еще шестой этап - Поддержка и обновления. Это означает обновлять отчеты и работать над улучшениями.\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 1 - Теория (1,5 - 2 часа)\", \"page\": 8, \"title\": \"Презентация\"}"}
{"id": 15, "rag_text": "Любопытность *, Понимание контекста*, Стратегическое мышление*, Техническое (Организованное) мышление*\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Практическая задача Урок 1.1\", \"page\": 10, \"title\": \"В роли аналитика данных может помочь ваши персональные качества:\"}"}
{"id": 16, "rag_text": "\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Практическая задача Урок 1.1\", \"page\": 11, \"title\": \"Типы Данных\"}"}
{"id": 17, "rag_text": "Аналитик в онлайн-магазине замечает падение заказов в одном сегменте. Как он может действовать?\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Практическая задача Урок 1.1\", \"page\": 12, \"title\": \"Мини кейс\"}"}
{"id": 18, "rag_text": "Аналитик в онлайн-магазине замечает падение заказов в одном сегменте. Как он может действовать?\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Практическая задача Урок 1.1\", \"page\": 13, \"title\": \"Мини кейс\"}"}
{"id": 19, "rag_text": "Не просто так люди шутят что весь финансовый мир держится на эксельке. Эти таблицы помогают людям легко собрать данные, их обработать, анализировать и визуализировать.\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 2 – Таблицы (1.5-2 часа)\", \"page\": 13, \"title\": \"Excel, Google Sheets\"}"}
{"id": 20, "rag_text": "Excel имеет тонну функционала но для усвоение этого инструмента нужно знать и обучиться функциям и формулам.\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 2 – Таблицы (1.5-2 часа)\", \"page\": 16, \"title\": \"Excel, Google Sheets\"}"}
{"id": 21, "rag_text": "Листы, ячейки, строки, столбцы Форматирование ячеек, Абсолютные/Относительные ссылки\nФундаментальные формулы:\nСУММ() – Суммирует все значения\nСРЗНАЧ() – Выводит среднее значение\nСЧЁТ() – Подсчет количество ячеек\nЕСЛИ() - Условие\nВПР() – Поиск по таблице\nИНДЕКС() + ПОИСКПОЗ() – Более гибкий поиск\nТЕКСТ() – Форматирование чисел и даты в нужную\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 2 – Таблицы (1.5-2 часа)\", \"page\": 17, \"title\": \"База для Excel\"}"}
{"id": 22, "rag_text": "Описание базы данных Для демонстрации примеров мы будем использовать базу данных интернет-магазина. Она содержит следующие таблицы: customers (клиенты): id, name, email, registration_date orders (заказы): id, customer_id, order_date order_items (товары в заказах): id, order_id, product_id, quantity, price products (товары): id, name, category, price\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 3 – SQL (1.5-2 часа)\", \"page\": 23, \"title\": \"Описание базы данных\"}"}
{"id": 23, "rag_text": "Наш первый запрос\nSELECT ... FROM\nSELECT * FROM customers;\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 3 – SQL (1.5-2 часа)\", \"page\": 24, \"title\": \"Наш первый запрос\"}"}
{"id": 24, "rag_text": "DISTINCT SELECT DISTINCT category FROM products; Ключевое слово DISTINCT позволяет выбрать уникальные значения, исключая дубликаты.\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 3 – SQL (1.5-2 часа)\", \"page\": 25, \"title\": \"Distinct\"}"}
{"id": 25, "rag_text": "AS Используется для задания псевдонимов столбцам или таблицам. SELECT name AS \"Имя клиента\", email AS \"Электронная почта\" FROM customers;\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 3 – SQL (1.5-2 часа)\", \"page\": 26, \"title\": \"AS\"}"}
{"id": 26, "rag_text": "LIMIT SELECT * FROM products LIMIT 3; Ограничивает количество возвращаемых строк.! Но не берет только лимитированное значение для расчетов! LIMIT ограничивает только результирующую таблицу\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 3 – SQL (1.5-2 часа)\", \"page\": 27, \"title\": \"Limit\"}"}
{"id": 27, "rag_text": "WHERE Фильтрует строки по заданному условию. SELECT * FROM orders WHERE customer_id = 1;\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 3 – SQL (1.5-2 часа)\", \"page\": 28, \"title\": \"Where\"}"}
{"id": 28, "rag_text": "ORDER BY ASC DESC SELECT * FROM products ORDER BY price DESC; Сортирует результаты по возрастанию (ASC) или убыванию (DESC).\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 3 – SQL (1.5-2 часа)\", \"page\": 29, \"title\": \"Order by\"}"}
{"id": 29, "rag_text": "LIKE и ILIKE Используются для поиска по шаблону; ILIKE не чувствителен к регистру (PostgreSQL). SELECT * FROM products WHERE name LIKE 'Смарт%'; SELECT * FROM products WHERE name ILIKE 'смарт%'; Выдвют один и тот же результат но ILIKE может сработать еще и на “сМаРтфон”\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 3 – SQL (1.5-2 часа)\", \"page\": 30, \"title\": \"Like и ILIKE\"}"}
{"id": 30, "rag_text": "COUNT, SUM, AVG SELECT COUNT(*) AS \"Количество заказов\" FROM orders; SELECT SUM(price) AS \"Общая стоимость товаров\", AVG(price) AS \"Средняя цена\" FROM products;\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 3 – SQL (1.5-2 часа)\", \"page\": 31, \"title\": \"Count, Sum, Avg\"}"}
{"id": 31, "rag_text": "GROUP BY Группирует строки и позволяет применять агрегатные функции к каждой группе. SELECT category, COUNT(*) AS \"Количество товаров\" FROM products GROUP BY category;\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 3 – SQL (1.5-2 часа)\", \"page\": 32, \"title\": \"Group by\"}"}
{"id": 32, "rag_text": "HAVING SELECT category, COUNT(*) AS \"Количество товаров\" FROM products GROUP BY category HAVING COUNT(*) > 5; Фильтрует группы после применения GROUP BY. WHERE фильтрует до\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 3 – SQL (1.5-2 часа)\", \"page\": 33, \"title\": \"HAVING\"}"}
{"id": 33, "rag_text": "DATE_TRUNC SELECT DATE_TRUNC('month', order_date) AS \"Месяц\", COUNT(*) AS \"Количество заказов\" FROM orders GROUP BY 1; Обрезает дату до указанного интервала (год, месяц, день и т.д.)\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 3 – SQL (1.5-2 часа)\", \"page\": 34, \"title\": \"DATE_TRUNC\"}"}
{"id": 34, "rag_text": "JOIN - самая важная операция в SQL Объединяет строки из разных таблиц на основе связанного столбца.\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 3 – SQL (1.5-2 часа)\", \"page\": 35, \"title\": \"JOIN\"}"}
{"id": 35, "rag_text": "INNER JOIN INNER JOIN – возвращаются только совпадающие строки. Без указания типа JOIN используется INNER. SELECT c.name, o.id AS order_id, o.order_date FROM customers c INNER JOIN orders o ON c.id = o.customer_id;\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 3 – SQL (1.5-2 часа)\", \"page\": 36, \"title\": \"INNER JOIN\"}"}
{"id": 36, "rag_text": "LEFT JOIN LEFT OUTER JOIN – возвращаются строки из левой таблицы и соответствующие строки из правой. Как можно заметить, ключевое слово OUTER можно опускать и использовать запись LEFT JOIN. SELECT c.name, o.id AS order_id, o.order_date FROM customers c LEFT JOIN orders o ON c.id = o.customer_id;\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 3 – SQL (1.5-2 часа)\", \"page\": 37, \"title\": \"LEFT JOIN\"}"}
{"id": 37, "rag_text": "RIGHT JOIN RIGHT OUTER JOIN – возвращаются строки из правой таблицы и соответствующие строки из левой. SELECT c.name, o.id AS order_id, o.order_date FROM customers c RIGHT JOIN orders o ON c.id = o.customer_id; Note: Чаще всего используют Left Join ставя главную таблицу слева, зависимую справа.\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 3 – SQL (1.5-2 часа)\", \"page\": 38, \"title\": \"RIGHT JOIN\"}"}
{"id": 38, "rag_text": "FULL JOIN FULL JOIN – возвращаются все строки из обеих таблиц. SELECT c.name, o.id AS order_id, o.order_date FROM customers c FULL OUTER JOIN orders o ON c.id = o.customer_id;\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 3 – SQL (1.5-2 часа)\", \"page\": 39, \"title\": \"FULL JOIN\"}"}
{"id": 39, "rag_text": "SELECT -- перечисление полей для результирующей таблицы BuyDate, COUNT(*) AS rows Порядок операторов FROM -- источник данных default.checks WHERE -- фильтрация данных BuyDate != '2019-03-08' GROUP BY -- группировка данных BuyDate HAVING -- фильтрация данных, аналогично WHERE, при использовании GROUP BY COUNT(*) > 215000 ORDER BY -- сортировка результирующей таблицы rows DESC LIMIT 100 -- ограничение на кол-во строк результирующей таблицы\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 3 – SQL (1.5-2 часа)\", \"page\": 40, \"title\": \"CROSS JOIN\"}"}
{"id": 41, "rag_text": "SELECT DISTINCT DATE_TRUNC('month', o.order_date) AS \"Месяц\",\nc.name AS \"Имя клиента\",\np.category AS \"Категория\",\nCOUNT(*) AS \"Количество заказов\",\nSUM(oi.price * oi.quantity) AS \"Общая сумма\",\nAVG(oi.price) AS \"Средняя цена товара\",\nPERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY oi.price) AS \"Медиана цены товара\"\nFROM customers c\nJOIN orders o ON c.id = o.customer_id\nJOIN order_items oi ON o.id = oi.order_id\nJOIN products p ON oi.product_id = p.id\nWHERE p.name ILIKE 'Смарт%'\nGROUP BY 1, 2, 3\nHAVING SUM(oi.price * oi.quantity) > 1000\nORDER BY \"Общая сумма\" DESC\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 3 – SQL (1.5-2 часа)\", \"page\": 42, \"title\": \"Теперь попробуем совместить все наши знания\"}"}
{"id": 42, "rag_text": "Подзапросы\nПодзапросы — это запросы, вложенные в другой SQL-запрос. Подзапросы можно разделить на 2 типа. Вот первый\n\nПодзапросы в фильтрах (в WHERE)\nИспользуются для фильтрации данных на основе результатов другого запроса.\nSELECT name, email\nFROM customers\nWHERE id IN (SELECT customer_id FROM orders WHERE order_date >= '2022-03-01');\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 3 – SQL (1.5-2 часа)\", \"page\": 44, \"title\": \"Подзапросы\"}"}
{"id": 43, "rag_text": "Второй вид подзапросов\nПодзапросы с оператором WITH (CTE)\nCommon Table Expressions (CTE) позволяют создавать временные именованные результаты, которые могут быть использованы в\nосновном запросе.\n\nWITH recent_orders AS (\nSELECT customer_id, order_date\nFROM orders\nWHERE order_date >= '2022-03-01'\n)\nSELECT c.name, ro.order_date\nFROM customers c\nJOIN recent_orders ro ON c.id = ro.customer_id;\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 3 – SQL (1.5-2 часа)\", \"page\": 45, \"title\": \"Второй вид подзапросов\"}"}
{"id": 44, "rag_text": "Создание Views и Tables и их различия\nТаблица — это базовый объект базы данных, который хранит данные.\nCREATE TABLE new_products (\nid SERIAL PRIMARY KEY,\nname VARCHAR(100),\ncategory VARCHAR(50),\nprice DECIMAL\n);\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 3 – SQL (1.5-2 часа)\", \"page\": 47, \"title\": \"Создание Views и Tables и их различия\"}"}
{"id": 45, "rag_text": "Создание представлений (Views, Вьюхи)\nПредставление — это виртуальная таблица, созданная на основе\nрезультата запроса.\nCREATE VIEW expensive_products AS(\nSELECT *\nFROM products\nWHERE price > 1000);\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 3 – SQL (1.5-2 часа)\", \"page\": 48, \"title\": \"Создание представлений (Views, Вьюхи)\"}"}
{"id": 46, "rag_text": "Главные различия между Таблицей и Вьюхой\nТаблица - статична, при создании она дальше не зависит от основной базы\nданных. В отличие от представления, таблица хранит в себе значения.\nВ то время как Вьюхи (представления) - динамичны, вьюха хранит в себе SQL\nзапрос который применяется на свежие данные и выводит результат из базы\nданных.\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 3 – SQL (1.5-2 часа)\", \"page\": 49, \"title\": \"Главные различия между Таблицей и Вьюхой\"}"}
{"id": 47, "rag_text": "WITH total_orders AS (\n\tSELECT customer_id, COUNT(*) AS order_count\n\tFROM orders\n\tGROUP BY customer_id\n),\nhigh_value_customers AS (\n\tSELECT customer_id\n\tFROM order_items\n\tGROUP BY customer_id\n\tHAVING SUM(price * quantity) > 5000\n)\nSELECT DISTINCT DATE_TRUNC('month', o.order_date) AS \"Месяц\",\n   \tc.name AS \"Имя клиента\",\n   \tp.category AS \"Категория\",\n   \tt.order_count AS \"Количество заказов\",\n   \tSUM(oi.price * oi.quantity) AS \"Общая сумма\",\n   \tAVG(oi.price) AS \"Средняя цена товара\",\n   \tPERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY oi.price) AS \"Медиана цены товара\"\nFROM customers c\nJOIN orders o ON c.id = o.customer_id\nJOIN order_items oi ON o.id = oi.order_id\nJOIN products p ON oi.product_id = p.id\nJOIN total_orders t ON c.id = t.customer_id\nWHERE p.name ILIKE 'смарт%'\n  AND c.id IN (SELECT customer_id FROM high_value_customers)\nGROUP BY 1, 2, 3, 4\nHAVING SUM(oi.price * oi.quantity) > 1000\nORDER BY \"Общая сумма\" DESC\nLIMIT 5;\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 3 – SQL (1.5-2 часа)\", \"page\": 50, \"title\": \"\"}"}
{"id": 48, "rag_text": "WITH total_orders: Создает CTE, подсчитывающий количество заказов для\nкаждого клиента.\nhigh_value_customers: Идентифицирует клиентов с общей суммой покупок\nболее 5000.\nОсновной запрос: Выбирает данные с использованием JOIN, фильтрует по\nимени продукта с помощью ILIKE, использует подзапрос в WHERE, группирует\nданные и вычисляет агрегатные функции.\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 3 – SQL (1.5-2 часа)\", \"page\": 51, \"title\": \"\"}"}
{"id": 49, "rag_text": "Урок 5 - Визуализации (1.5-2 часа)\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 5 - Визуализации (1.5-2 часа)\", \"page\": 53, \"title\": \"Урок 5 - Визуализации (1.5-2 часа)\"}"}
{"id": 50, "rag_text": "Для чего нужна визуализация?\nГлавная роль визуализации - это презентовать в легком визуальном ключе\nглавное и важное, тренды и корреляции и выводы сделанные на основе\nанализа. Визуализацией может служить многое, от простых линейных графов\nс пай чартами, до сложных древесных карт созданных на основе\nматематических вычислений.\nХорошая визуализация имеет:\n●\n\nЦелостность И Корректность данных\n\n●\n\nАктуальность и Интересность\n\n●\n\nЦелесообразность и Эффективность\n\n●\n\nДизайн и Структуру\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 5 - Визуализации (1.5-2 часа)\", \"page\": 54, \"title\": \"Для чего нужна визуализация?\"}"}
{"id": 51, "rag_text": "Получше о каждой критерий\nЦелостность И Корректность данных - чтобы все данные с которыми работает аналитик\nбыли достоверными, целыми и безошибочны.\nАктуальность и Интересность - чтобы смотрелось интересно, бодро и не был однотипным\nсостоящим из одних лишь линии.\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 5 - Визуализации (1.5-2 часа)\", \"page\": 55, \"title\": \"Получше о каждой критерий\"}"}
{"id": 52, "rag_text": "Целесообразность и Эффективность - чтобы визуализация показывала решение заданной\nзадачи перед аналитиком, а само решение была применима на практике.\nДизайн и Структура - чтобы все было красиво, гармонично и структурировано.\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 5 - Визуализации (1.5-2 часа)\", \"page\": 55, \"title\": \"Получше о каждой критерий\"}"}
{"id": 53, "rag_text": "Стори теллинг - основа визуализации\nКак было сказано до, главное в визуалах это рассказать этим о чем то. Лучше всего это\nпоказать на примере, одного из дэшбордов начинающего аналитика - Ride the MidWest\nЭтот простой граф показывает главное, что в определенном регионе\nСША продажи идут плохо.\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 5 - Визуализации (1.5-2 часа)\", \"page\": 56, \"title\": \"Стори теллинг - основа визуализации\"}"}
{"id": 54, "rag_text": "Этот дэшборд не является идеальным,\nнапример та же карта, (не совсем\nпонятно что там означает светло\nкрасное и темно красное).\nА тут написано проблема и предлагаемое решение.\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 5 - Визуализации (1.5-2 часа)\", \"page\": 56, \"title\": \"Стори теллинг - основа визуализации\"}"}
{"id": 55, "rag_text": "Однако главное это то что с помощью\nэтого дэшборда аналитик пытался\nдонести определенную мысль, так сказать\n“рассказать свою историю”\nА тут указана возможность для развития, велосипеды что являются\nглавным продуктом компании тут не пользуются успехом, а значит\nнадо направить маркетинговые усилие в этом направлении.\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 5 - Визуализации (1.5-2 часа)\", \"page\": 56, \"title\": \"Стори теллинг - основа визуализации\"}"}
{"id": 56, "rag_text": "Bы можете использовать этот метод на первое время чтобы ориентироваться какие\nвизуалы можете применять с вашими данными. Дерево решений: Какую историю вы хотите рассказать? Если в ваших данных только одна числовая переменная — используйте гистограмму или график плотности. Если у вас несколько наборов данных — используйте линейный график или круговую диаграмму. Если вы измеряете изменения со временем — используйте столбчатую диаграмму. Если нужно показать взаимосвязи между данными — используйте диаграмму рассеяния или тепловую карту.\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 5 - Визуализации (1.5-2 часа)\", \"page\": 57, \"title\": \"Decision Tree\"}"}
{"id": 57, "rag_text": "Five-second rule: A data visualization should be clear, effective, and\nconvincing enough to be absorbed in five seconds or less.\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 5 - Визуализации (1.5-2 часа)\", \"page\": 58, \"title\": \"Five-second rule\"}"}
{"id": 58, "rag_text": "Color contrast: Graphs and charts should use a diverging color palette to\nshow contrast between elements.\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 5 - Визуализации (1.5-2 часа)\", \"page\": 58, \"title\": \"Color contrast\"}"}
{"id": 59, "rag_text": "Conventions and expectations: Visuals and their organization should align with\naudience expectations and cultural conventions. For example, if the majority\nof your audience associates green with a positive concept and red with a\nnegative one, your visualization should reflect this.\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 5 - Визуализации (1.5-2 часа)\", \"page\": 58, \"title\": \"Conventions and expectations\"}"}
{"id": 60, "rag_text": "Minimal labels: Titles, axes, and annotations should use as few labels as it\ntakes to make sense. Having too many labels makes your graph or chart too\nbusy. It takes up too much space and prevents the labels from being shown\nclearly.\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 5 - Визуализации (1.5-2 часа)\", \"page\": 58, \"title\": \"Minimal labels\"}"}
{"id": 61, "rag_text": "Первый урок - Excel\nЭксель это самый легкий в освоении инструмент визуализации для новичков,\nпо причине того что большинство уже к этому времени довольно хорошо\nзнакомы с Эксель и его интерфейсом, и к тому же все нужные данные для\nвизуализации уже представлены и легко редактируемы внутри платформы.\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 5 - Визуализации (1.5-2 часа)\", \"page\": 59, \"title\": \"Первый урок - Excel\"}"}
{"id": 62, "rag_text": "Практическая задача Урок 5.1\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 5 - Визуализации (1.5-2 часа)\", \"page\": 60, \"title\": \"Практическая задача Урок 5.1\"}"}
{"id": 63, "rag_text": "Второй урок - Tableau Этот инструмент очень схож с Эксель в своих визуалах, однако чуть более разнообразен, а также главное дает легко построить и настроить Дэшборды.\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 5 - Визуализации (1.5-2 часа)\", \"page\": 60, \"title\": \"Второй урок - Tableau\"}"}
{"id": 64, "rag_text": "Практическая задача Урок 5.2\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 5 - Визуализации (1.5-2 часа)\", \"page\": 61, \"title\": \"Практическая задача Урок 5.2\"}"}
{"id": 65, "rag_text": "Третий урок - RStudio\nЭтот инструмент уже чуть поинтереснее, ибо тут визуалы строятся благодаря\nстрокам кода, однако не стоит сильно переживать, визуалы в большинстве\nсводятся к нескольким шаблонным строкам кода, которые мы изучим и\nпопробуем построить простые визуалы.\n\nMETADATA: {\"course_title\": \"Курс по аналитике данных\", \"lesson\": \"Урок 5 - Визуализации (1.5-2 часа)\", \"page\": 62, \"title\": \"Третий урок - RStudio\"}"}
{"id": 66, "rag_text": "Здравствуйте! Меня зовут Рамазан, и я буду вашим тьютором на этом курсе по Python. Давайте начнем.\n\nСначала скачайте папку с материалами — ссылка находится под этим видео. После этого перенесите папку в редактор VSCode.\n\nВнутри уже есть файл с расширением .py. Это означает, что он написан на языке Python. Вы также можете создать файл вручную. В будущем называйте файлы по-английски, например:\ncode:program.py\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 1 — Введение\", \"material\": \"Установка и запуск VSCode\", \"time_interval\": \"00:00:00 - 00:00:29\"}"}
{"id": 67, "rag_text": "Теперь вы готовы написать первую программу. Введите следующую команду:\ncode:print(\"Hello, world\")\n\nПосле этого нажмите кнопку запуска (треугольник ▶️), и вы увидите результат внизу: текст Hello, world появится в выводе.\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 1 — Введение\", \"material\": \"Первая программа print\", \"time_interval\": \"00:00:29 - 00:01:00\"}"}
{"id": 68, "rag_text": "Команда print(...) выводит на экран то, что находится внутри скобок.\nЕсли это текст, он обязательно должен быть в кавычках:\ncode:print(\"Привет, мир\")\n\nЕсли забыть одну кавычку, программа выдаст ошибку:\ncode:print(\"Привет, мир) ← ошибка\nили\ncode:print(Привет, мир\") ← тоже ошибка\n\nЧтобы программа работала, нужно обязательно:\n\n- открывать и закрывать круглые скобки ()\n- использовать кавычки вокруг текста: \"текст\"\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 1 — Введение\", \"material\": \"Синтаксис команды print\", \"time_interval\": \"00:01:00 - 00:01:26\"}"}
{"id": 69, "rag_text": "Вы можете писать несколько print(...) подряд. Например:\ncode:print(\"Hello, world\")\ncode:print(48)\ncode:print(\"Hi\")\ncode:print(\"Yo\")\n\nПосле запуска вы увидите:\n\nHello, world  \n48  \nHi  \nYo\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 1 — Введение\", \"material\": \"Примеры вывода текста и чисел\", \"time_interval\": \"00:01:26 - 00:02:18\"}"}
{"id": 70, "rag_text": "Когда вы выводите текст, он должен быть в кавычках:\ncode:print(\"Меня зовут Рамазан\")\n\nКогда вы выводите число, кавычки не нужны:\ncode:print(5)\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 1 — Введение\", \"material\": \"Разница между строками и числами\", \"time_interval\": \"00:02:18 - 00:02:45\"}"}
{"id": 71, "rag_text": "Под видео есть файл с заданиями. Скачайте его, перенесите в VSCode и решите. Это отличная практика.\n\nЖелаю удачи! До следующего урока!\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 1 — Введение\", \"material\": \"Домашнее задание и завершение\", \"time_interval\": \"00:02:45 - 00:03:00\"}"}
{"id": 72, "rag_text": "Привет, добро пожаловать на следующий урок, на второй урок.\nОн называется «Переменные и типы данных».\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 2 — Переменные и типы данных\", \"material\": \"Введение\", \"time_interval\": \"00:00:00 - 00:00:03\"}"}
{"id": 73, "rag_text": "Во-первых, мы пишем числовое значение — это x, это имя переменной, потом равно — это присваивание, и десять — это значение.\nТо есть переменная x присваивает себе значение десять.\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 2 — Переменные и типы данных\", \"material\": \"Объявление числовой переменной\", \"time_interval\": \"00:00:05 - 00:00:15\"}"}
{"id": 74, "rag_text": "Также вы видите текстовое значение — то же самое.\nПеременная name, знак равно, значение \"Aruzhan\".\ncode:name = \"Aruzhan\"\n\nТо есть переменная name присваивает себе текстовое значение \"Aruzhan\".\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 2 — Переменные и типы данных\", \"material\": \"Объявление строковой переменной\", \"time_interval\": \"00:00:18 - 00:00:28\"}"}
{"id": 75, "rag_text": "Давайте напишем:\ncode:name = \"Рамазан\"\ncode:age = 18\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 2 — Переменные и типы данных\", \"material\": \"Пример с несколькими переменными\", \"time_interval\": \"00:00:33 - 00:00:44\"}"}
{"id": 76, "rag_text": "Теперь давайте выведем переменную name:\ncode:print(name)\n\nМы видим, что вышло не слово name, а \"Рамазан\", потому что переменная содержит это значение.\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 2 — Переменные и типы данных\", \"material\": \"Вывод значения переменной\", \"time_interval\": \"00:00:44 - 00:01:03\"}"}
{"id": 77, "rag_text": "Также выведем переменные через запятую:\ncode:print(name, age)\n\nВ результате получаем:\nРамазан 18\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 2 — Переменные и типы данных\", \"material\": \"Множественный вывод\", \"time_interval\": \"00:01:03 - 00:01:14\"}"}
{"id": 78, "rag_text": "Можно хранить десятичные числа:\ncode:pi = 3.14\n\nПеременная — как коробка, куда можно положить имя, число или десятичное значение.\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 2 — Переменные и типы данных\", \"material\": \"Числа с плавающей точкой\", \"time_interval\": \"00:01:21 - 00:01:51\"}"}
{"id": 79, "rag_text": "Python сам определяет тип:\n- это число?\n- или строка?\n\nКстати, строки надо писать в кавычках:\ncode:name = Рамазан  ← ошибка\ncode:name = \"Рамазан\"  ← правильно\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 2 — Переменные и типы данных\", \"material\": \"Типы данных и синтаксис\", \"time_interval\": \"00:01:53 - 00:02:08\"}"}
{"id": 80, "rag_text": "Если написать:\ncode:name = Рамазан\nи вывести:\ncode:print(name)\n\nбудет ошибка, потому что Python не понимает — это не число и не строка.\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 2 — Переменные и типы данных\", \"material\": \"Ошибка без кавычек\", \"time_interval\": \"00:02:08 - 00:02:13\"}"}
{"id": 81, "rag_text": "Теперь давайте напишем:\n        code:print('Ramazan is', age, \"years old\")\n\n        Если age = 18, получится:\n        code:Ramazan is 18 years old\n\n        Можно поменять age:\n        code:age = 70\n        Ramazan is 70 years old\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 2 — Переменные и типы данных\", \"material\": \"Вывод строки + переменные\", \"time_interval\": \"00:02:15 - 00:03:01\"}"}
{"id": 82, "rag_text": "Если присвоить строку:\n        code:age = \"70\"\n\n        Это тоже работает:\n        code:print('Ramazan is', age, \"years old\") → Ramazan is 70 years old\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 2 — Переменные и типы данных\", \"material\": \"Пустая строка как значение переменной\", \"time_interval\": \"00:03:01 - 00:03:15\"}"}
{"id": 83, "rag_text": "Тема сегодняшнего урока — это ввод и вывод данных. Сейчас я вас научу делать код, который общается с человеком, как чат-бот.\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 3 — Ввод и вывод\", \"material\": \"Введение\", \"time_interval\": \"00:00:00 - 00:00:08\"}"}
{"id": 84, "rag_text": "Переменная name сохраняет введённое значение как строку:\ncode:name = input(\"Как тебя зовут?\")\nЕсли ввести 'Аружан', то name будет равно 'Аружан'.\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 3 — Ввод и вывод\", \"material\": \"Ввод строки с input()\", \"time_interval\": \"00:00:08 - 00:00:24\"}"}
{"id": 85, "rag_text": "Чтобы получить число, используем int перед input:\ncode:age = int(input(\"Сколько тебе лет?\"))\nСначала input получает строку (например, '18'), потом int преобразует её в число.\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 3 — Ввод и вывод\", \"material\": \"Ввод чисел с int(input(...))\", \"time_interval\": \"00:00:24 - 00:00:48\"}"}
{"id": 86, "rag_text": "Пример программы:\ncode:hello = input(\"Как тебя зовут?\")\ncode:print(\"Привет\", hello)\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 3 — Ввод и вывод\", \"material\": \"Мини-чат с пользователем\", \"time_interval\": \"00:00:56 - 00:01:37\"}"}
{"id": 87, "rag_text": "Что бы вы ни ввели — 'Рамазан', '56', или '655' — всё попадёт в переменную hello и будет выведено.\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 3 — Ввод и вывод\", \"material\": \"Поведение input\", \"time_interval\": \"00:01:47 - 00:02:03\"}"}
{"id": 88, "rag_text": "Функция input() всегда возвращает строку. Что бы вы ни ввели — текст или число — это будет строка.\nЧтобы использовать как число, надо применять int(...).\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 3 — Ввод и вывод\", \"material\": \"Повтор: строки и числа\", \"time_interval\": \"00:02:03 - 00:02:18\"}"}
{"id": 89, "rag_text": "Пример без input:\ncode:name = \"Ali\"\ncode:age = 24\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 3 — Ввод и вывод\", \"material\": \"Вывод переменных по старому способу\", \"time_interval\": \"00:02:26 - 00:02:59\"}"}
{"id": 90, "rag_text": "Вместо print(name, age, ...) можно использовать f-строки:\ncode:print(f\"Его зовут {name}, ему {age} лет.\")\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 3 — Ввод и вывод\", \"material\": \"F-строки (форматированные строки)\", \"time_interval\": \"00:03:00 - 00:04:14\"}"}
{"id": 91, "rag_text": "f-строки — это современный и удобный способ форматирования строк. Всё, что вне фигурных скобок — обычный текст, а внутри — переменные.\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 3 — Ввод и вывод\", \"material\": \"Объяснение f-строк\", \"time_interval\": \"00:04:14 - 00:04:24\"}"}
{"id": 92, "rag_text": "Мини-диалог:\ncode:message = input(\"Какой цвет тебе нравится?\")\ncode:print(f\"Мне тоже нравится {message}\")\n\nf обязательно перед кавычками!\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 3 — Ввод и вывод\", \"material\": \"Пример: пользователь вводит любимый цвет\", \"time_interval\": \"00:04:24 - 00:05:13\"}"}
{"id": 93, "rag_text": "Если ввести мне нравится зеленый то output будет Мне тоже нравится зеленый. Итог: теперь вы умеете получать ввод от пользователя, преобразовывать его в число и красиво выводить с помощью f-строк. Это база для простого чат-бота.\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 3 — Ввод и вывод\", \"material\": \"Заключение\", \"time_interval\": \"00:05:13 - 00:05:41\"}"}
{"id": 94, "rag_text": "Всем привет! С вами Рамазан. В этом уроке мы разберем базовые арифметические операции в Python. Это важно для создания калькуляторов, обработки чисел и решения задач.\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 4 — Арифметические операции\", \"material\": \"Введение\", \"time_interval\": \"00:00:00 - 00:00:14\"}"}
{"id": 95, "rag_text": "Основные операции: сложение (+), вычитание (-), умножение (*), деление (/). Они работают так же, как в реальной жизни.\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 4 — Арифметические операции\", \"material\": \"Обзор операций\", \"time_interval\": \"00:00:14 - 00:00:27\"}"}
{"id": 96, "rag_text": "Пример:\ncode:x = 5\ny = 3\ncode:print(x + y) → 8\nТеперь x = 8, y = 3 → x + y = 11\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 4 — Арифметические операции\", \"material\": \"Сложение\", \"time_interval\": \"00:00:27 - 00:01:00\"}"}
{"id": 97, "rag_text": "Также используем вычитание, умножение и деление:\ncode:print(x - y)\ncode:print(x * y)\ncode:print(x / y)\n\nРезультаты: 5, 24, и дробное число — потому что деление в Python всегда возвращает число с точкой.\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 4 — Арифметические операции\", \"material\": \"Остальные операции\", \"time_interval\": \"00:01:00 - 00:01:49\"}"}
{"id": 98, "rag_text": "Даже если результат делится нацело, например 8 / 2 → будет 4.0 (с точкой). Это float. Чтобы получить целое число, используем // — оператор целочисленного деления:\ncode:print(10 // 2) → 5\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 4 — Арифметические операции\", \"material\": \"Целочисленное деление\", \"time_interval\": \"00:01:49 - 00:02:37\"}"}
{"id": 99, "rag_text": "Если деление не точное:\ncode:print(10 // 4) → 2 (остаток отбрасывается)\ncode:print(10 / 4) → 2.5\n\n// отбрасывает дробную часть и оставляет только целое число.\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 4 — Арифметические операции\", \"material\": \"Отличие // от /\", \"time_interval\": \"00:02:37 - 00:03:18\"}"}
{"id": 100, "rag_text": "Пример:\ncode:print(1 // 9) → 0\ncode:print(1 / 9) → 0.111...\n\n// всегда округляет вниз и выдает только целую часть результата.\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 4 — Арифметические операции\", \"material\": \"Округление вниз\", \"time_interval\": \"00:03:18 - 00:03:32\"}"}
{"id": 101, "rag_text": "Оператор % — это остаток от деления (модуль):\ncode:print(10 % 3) → 1\ncode:print(10 % 2) → 0\n\nОн показывает, что остается после деления.\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 4 — Арифметические операции\", \"material\": \"Остаток от деления (%)\", \"time_interval\": \"00:03:32 - 00:04:14\"}"}
{"id": 102, "rag_text": "Пример:\ncode:print(256 % 7) → 4\ncode:print(4 % 2) → 0\n\nЕсли число делится нацело — остаток будет 0. Если нет — выдается остаток как в школе.\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 4 — Арифметические операции\", \"material\": \"Дополнительные примеры с %\", \"time_interval\": \"00:04:14 - 00:05:11\"}"}
{"id": 103, "rag_text": "Возведение в степень — оператор **:\ncode:print(4 ** 2) → 16\ncode:print(4 ** 0.5) → 2.0 (корень)\n\nPython поддерживает целые и дробные степени.\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 4 — Арифметические операции\", \"material\": \"Возведение в степень (**)\", \"time_interval\": \"00:05:11 - 00:05:34\"}"}
{"id": 104, "rag_text": "Приоритет операций как в математике:\ncode:number = 2 + 3 * 4 → 14 (сначала умножение)\nСкобки меняют порядок:\ncode:number = (2 + 3) * 4 → 20\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 4 — Арифметические операции\", \"material\": \"Приоритет операций и скобки\", \"time_interval\": \"00:05:34 - 00:06:11\"}"}
{"id": 105, "rag_text": "Теперь вы знаете все базовые математические операции в Python. Это пригодится в следующем уроке, где начнем разбирать условия (if, else). Спасибо и до встречи!\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 4 — Арифметические операции\", \"material\": \"Заключение\", \"time_interval\": \"00:06:11 - 00:06:39\"}"}
{"id": 131, "rag_text": "Здесь i — переменная, которая меняется от 1 до 10. Внутри скобок мы используем умножение. Посмотрим на результат.\n        code:\n        x = 5\n        for i in range(1, 11):\n            print(f\"{x} * {i} = {x * i}\")\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 6 - Цикл for\", \"time_interval\": \"00:06:30 - 00:06:50\"}"}
{"id": 106, "rag_text": "Привет, меня зовут Рамазан. В этом уроке мы разберём условные операторы в Python. Это конструкции, с помощью которых программа может принимать решения. В жизни вы тоже действуете по условиям: например, если идёт дождь — берёте зонт, если нет — идёте спокойно. То же самое можно реализовать в Python.\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 5 - Условные операторы\", \"time_interval\": \"00:00:00 - 00:00:26\"}"}
{"id": 107, "rag_text": "Давайте посмотрим на синтаксис. Есть команды if, elif и else. Условные операторы строятся так: идёт ключевое слово, затем условие, потом блок кода. if — означает «если», elif — «иначе если», а else — просто «иначе». Python идёт сверху вниз и выполняет только первый подходящий блок. Остальные пропускаются. Помогают в этом логические операторы — сравнения.\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 5 - Условные операторы\", \"time_interval\": \"00:00:26 - 00:01:26\"}"}
{"id": 108, "rag_text": "Условия строятся с помощью логических операторов. Например: == — равно, != — не равно, > — больше, < — меньше, >= — больше или равно, <= — меньше или равно.\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 5 - Условные операторы\", \"time_interval\": \"00:01:26 - 00:01:45\"}"}
{"id": 109, "rag_text": "Также есть логические связки: and — и, or — или, not — отрицание. Пример: если возраст больше 18 и есть паспорт — можно путешествовать. Если он студент или учитель — доступ к платформе разрешён. not инвертирует логическое значение. Например: если пользователь не забанен — добро пожаловать. Если забанен — не пускаем.\n        code:\n        if age > 18 and has_passport:\n            print(\"Можно путешествовать\")\n        elif is_student or is_teacher:\n            print(\"Доступ к платформе разрешён\")\n        elif not is_banned:\n            print(\"Добро пожаловать\")\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 5 - Условные операторы\", \"time_interval\": \"00:01:45 - 00:02:45\"}"}
{"id": 110, "rag_text": "Давайте разберём примеры. Пусть \n        code: \n        x = 5. \n        if x == 5:\n            print(\"x равен 5\")\n        if x > 3:\n            print(\"x больше 3\")\n        if x != 0:\n            print(\"x не равен 0\")\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 5 - Условные операторы\", \"time_interval\": \"00:02:45 - 00:03:50\"}"}
{"id": 111, "rag_text": "Что выведется? x == 5 — истина, x > 3 — тоже, x != 0 — снова истина. Всё понятно. Теперь пример с возрастом и доступом. Спросим у пользователя возраст:\n        code:\n        age = int(input(\"Введите ваш возраст: \"))\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 5 - Условные операторы\", \"time_interval\": \"00:03:50 - 00:04:47\"}"}
{"id": 112, "rag_text": "int(input(...)) — это способ сразу получить число, а не текст. int переводит ввод в целое число. Теперь проверим условия:\n        code:\n        if age >= 18:\n            print(\"Полный доступ разрешён\")\n        elif age >= 15:\n            print(\"Частичный доступ разрешён\")\n        else:\n            print(\"Доступ запрещён\")\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 5 - Условные операторы\", \"time_interval\": \"00:04:47 - 00:06:08\"}"}
{"id": 113, "rag_text": "Разберём подробнее: Если возраст больше или равен 18 — полный доступ. Если не попал в это условие, но возраст больше или равен 15 — частичный доступ. Иначе — доступ запрещён.\n        code:\n        if age >= 18:\n            print(\"Полный доступ разрешён\")\n        elif age >= 15:\n            print(\"Частичный доступ разрешён\")\n        else:\n            print(\"Доступ запрещён\")\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 5 - Условные операторы\", \"time_interval\": \"00:06:08 - 00:06:50\"}"}
{"id": 114, "rag_text": "Примеры: Вводим 25 — полный доступ. Вводим 4 — доступ запрещён. Вводим 15 — частичный доступ\n        code:\n        if age >= 18:\n            print(\"Полный доступ разрешён\")\n        elif age >= 15:\n            print(\"Частичный доступ разрешён\")\n        else:\n            print(\"Доступ запрещён\")\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 5 - Условные операторы\", \"time_interval\": \"00:06:50 - 00:07:20\"}"}
{"id": 115, "rag_text": "Все условия должны заканчиваться двоеточием. Иначе — ошибка. Вложенные блоки пишутся с отступом — обычно 4 пробела. Это делается автоматически.\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 5 - Условные операторы\", \"time_interval\": \"00:07:20 - 00:07:50\"}"}
{"id": 116, "rag_text": "Выполняется только одно из условий. Либо человек старше 18, либо старше 15, либо не попадает ни в одну категорию. Все три одновременно не выполнятся.\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 5 - Условные операторы\", \"time_interval\": \"00:07:50 - 00:08:08\"}"}
{"id": 146, "rag_text": "Если написать i <= 10, цикл дойдет до 10. Если условие i <= -5, ничего не произойдет — цикл пропустится.\n        code:\n        i = 1\n        while i <= -5:\n            print(i)\n            i = i + 1\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 7 - Цикл while\", \"time_interval\": \"00:05:14 - 00:05:37\"}"}
{"id": 117, "rag_text": "На этом всё по условным операторам. Если ты понял урок — уже умеешь писать программы, принимающие решения. В следующем видео подведём итоги первой недели и проведём квиз. Под этим видео — задания, которые нужно обязательно решить, чтобы закрепить материал. Спасибо. Переходим к следующему уроку.\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 5 - Условные операторы\", \"time_interval\": \"00:08:08 - 00:08:37\"}"}
{"id": 118, "rag_text": "Привет и добро пожаловать на модуль 2. В этом уроке мы начинаем новую, очень важную тему — циклы. Цикл — это способ повторить действия много раз, не копируя одну и ту же строку кода. Сейчас покажу наглядно. Допустим, тебе нужно 5 раз вывести «hello». Как бы ты это сделал?\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 6 - Цикл for\", \"time_interval\": \"00:00:00 - 00:00:25\"}"}
{"id": 119, "rag_text": "Ты бы написал «hello», скопировал его: раз, два, три, четыре, пять. Легко. Давайте: print(\"hello\") — пять раз. А если я скажу — десять раз? Шесть, семь, восемь, девять, десять — получилось. А если сто раз? Ты будешь копировать? А если тысячу? Или миллион? А если вместо «hello» — другое слово? Чтобы сэкономить время и не делать всё вручную, придумали циклы.\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 6 - Цикл for\", \"time_interval\": \"00:00:25 - 00:00:55\"}"}
{"id": 120, "rag_text": "Например, нужно 100 строк — ты скопировал и вставил, получилось 104 даже, молодец. Но это неудобно. Лучше использовать цикл.\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 6 - Цикл for\", \"time_interval\": \"00:00:55 - 00:01:22\"}"}
{"id": 121, "rag_text": "Разберём синтаксис: for i in range(...). Допустим, выведем это 5 раз. Ставим двоеточие, пишем print(\"hello\"). То, что вы раньше писали вручную 5 раз, можно сделать двумя строками. Хотите 537 раз? Пожалуйста. Нажимаем — выводится.\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 6 - Цикл for\", \"time_interval\": \"00:01:22 - 00:01:50\"}"}
{"id": 122, "rag_text": "Вот — 500 «hello». Пролистать долго, но всё работает. Это придумано, чтобы облегчить жизнь. Вот наглядный пример — 10 раз, и всё сразу видно.\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 6 - Цикл for\", \"time_interval\": \"00:01:50 - 00:02:10\"}"}
{"id": 123, "rag_text": "Команда говорит Python: «Сделай это 10 раз». И он делает. range создаёт последовательность от 0 до 9. i — это переменная-счётчик. Весь код внутри цикла должен быть с отступом. Результат — как видим.\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 6 - Цикл for\", \"time_interval\": \"00:02:10 - 00:02:40\"}"}
{"id": 124, "rag_text": "range(n) создаёт числа от 0 до n−1. Например, range(5) — это от 0 до 4.\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 6 - Цикл for\", \"time_interval\": \"00:02:40 - 00:02:55\"}"}
{"id": 125, "rag_text": "Пример: for i in range(3): print(i).\n        code:\n        for i in range(3):\n            print(i)\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 6 - Цикл for\", \"time_interval\": \"00:02:55 - 00:03:07\"}"}
{"id": 126, "rag_text": "Что такое i? Очистим и выведем: 0, 1, 2. Не 1, 2, 3 — а именно с нуля. Если сделать range(2, 6), будет: 2, 3, 4, 5. То есть от начала до n−1.\n        code:\n        for i in range(3):\n            print(i)\n        code:\n        for i in range(2, 6):\n            print(i)\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 6 - Цикл for\", \"time_interval\": \"00:03:07 - 00:03:55\"}"}
{"id": 127, "rag_text": "А если range(0, 10, 2), будет: 0, 2, 4, 6, 8 — шаг 2, только чётные числа. Если range(0, 20, 1), это будет считалочка. Если range(0, 20, 13) — будет: 0, 13. Следующее выходит за пределы.\n        code:\n        for i in range(0, 10, 2):\n            print(i)\n        code:\n        for i in range(0, 20, 1):\n            print(i)\n        code:\n        for i in range(0, 20, 13):\n            print(i)\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 6 - Цикл for\", \"time_interval\": \"00:03:55 - 00:04:45\"}"}
{"id": 128, "rag_text": "Можно использовать отрицательные шаги. Например: range(10, 0, -1) — от 10 до 1 с шагом -1. Проверим: 10, 9, 8, 7… работает в обратном порядке.\n        code: \n        for i in range(10, 0, -1):\n            print(i)\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 6 - Цикл for\", \"time_interval\": \"00:04:45 - 00:05:10\"}"}
{"id": 129, "rag_text": "Как это можно использовать? Например: для многократного вывода текста, для вывода чисел от 1 до 100 или от 100 до 1,для расчётов (например, кинетическая энергия),для обработки данных в списках. Об этом поговорим в следующих уроках.\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 6 - Цикл for\", \"time_interval\": \"00:05:10 - 00:05:35\"}"}
{"id": 130, "rag_text": "Давайте пример. x = 5. Далее: for i in range(1, 11):, напишем: f\"{x} * {i} = {x * i}\".\n        code:\n        x = 5\n        for i in range(1, 11):\n            print(f\"{x} * {i} = {x * i}\")\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 6 - Цикл for\", \"time_interval\": \"00:05:35 - 00:06:30\"}"}
{"id": 132, "rag_text": "i = 1, x = 5, 5 * 1 = 5. Выведется строка «5 * 1 = 5». Потом i = 2, x всё ещё 5 — получится 10. И так далее.  Так, x = 5, i меняется от 1 до 10. Сначала 5 * 1 = 5, потом 5 * 2 = 10 и так далее. Мы вывели таблицу умножения на 5. Очень красиво. Это просто текст.\n        code:\n        x = 5\n        for i in range(1, 11):\n            print(f\"{x} * {i} = {x * i}\")\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 6 - Цикл for\", \"time_interval\": \"00:06:50 - 00:08:10\"}"}
{"id": 133, "rag_text": "Циклы часто используют для генерации таблиц, шаблонов, вычислений. FOR — это цикл с известным числом повторений. Мы знаем, что он работает от 1 до 10, от 5 до 6 и так далее.\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 6 - Цикл for\", \"time_interval\": \"00:08:10 - 00:08:36\"}"}
{"id": 134, "rag_text": "В других циклах, которые мы позже изучим, количество повторений может быть неизвестно. Но for — обязательно с известным количеством шагов.\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 6 - Цикл for\", \"time_interval\": \"00:08:36 - 00:08:47\"}"}
{"id": 135, "rag_text": "Мы повторили 10 раз, потому что указали range(1, 11). Хотим 20 — пишем range(1, 21). Тогда последняя строка будет 5 * 20 = 100.\n        code:\n        x = 5\n        for i in range(1, 21):\n            print(f\"{x} * {i} = {x * i}\")\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 6 - Цикл for\", \"time_interval\": \"00:08:47 - 00:09:15\"}"}
{"id": 136, "rag_text": "range — это надёжный способ контролировать количество повторений. Python «двигает» переменную внутри цикла. Не забывайте про двоеточие — это важно. Теперь вы знаете, как работают циклы в Python. Это важная и сложная тема, так что переходите к квизам и заданиям — они внизу. В следующем уроке мы разберём второй тип цикла — while, который выполняется, пока условие истинно.\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 6 - Цикл for\", \"time_interval\": \"00:09:15 - 00:09:47\"}"}
{"id": 137, "rag_text": "Привет всем! Сегодня мы разберем цикл while, как и обещали: когда использовать, как не застрять в бесконечном цикле и в чем отличие от for. Например: ты качаешься в зале, пока не устанешь. Это и есть while. То есть ты что-то делаешь, пока условие выполняется. While с английского — «пока».\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 7 - Цикл while\", \"time_interval\": \"00:00:00 - 00:00:23\"}"}
{"id": 138, "rag_text": "Разберем синтаксис while. Он пишется так: while, затем условие, затем блок кода. Принцип: пока условие истинно (True), цикл выполняется. Например: пока x == 5, код выполняется.\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 7 - Цикл while\", \"time_interval\": \"00:00:23 - 00:00:58\"}"}
{"id": 139, "rag_text": "Пример: i = 1 while i <= 5: print(i) i = i + 1 Мы создали переменную i. Пока i <= 5, будет печататься i.\n        code: \n        i = 1\n        while i <= 5:\n            print(i)\n            i = i + 1\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 7 - Цикл while\", \"time_interval\": \"00:00:58 - 00:01:25\"}"}
{"id": 140, "rag_text": "Если не увеличивать i, то i останется равным 1, и программа будет бесконечно печатать 1. Цикл будет бесконечным. Удалим, чтобы компьютер не перегрелся.\n        code:\n        i = 1\n        while i <= 5:\n            print(i)\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 7 - Цикл while\", \"time_interval\": \"00:01:25 - 00:01:53\"}"}
{"id": 141, "rag_text": "Чтобы этого не было, нужно внутри цикла изменить i. Добавим строку i = i + 1.\n        code:\n        i = 1\n        while i <= 5:\n            print(i)\n            i = i + 1\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 7 - Цикл while\", \"time_interval\": \"00:01:53 - 00:02:29\"}"}
{"id": 142, "rag_text": "Это значит: берем текущее значение i, прибавляем 1. Например, было 1, стало 2. Сейчас покажу на примере — уберем while, напишем i + 1, затем print(i).\n        code:\n        i = 1\n        i = i + 1\n        print(i)\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 7 - Цикл while\", \"time_interval\": \"00:02:29 - 00:02:44\"}"}
{"id": 143, "rag_text": "Вы думаете, i будет 1, но он станет 2. Можно поставить i = i + 20, тогда будет 22. Если было 1, стал 2, добавили 20 — стало 22.\n        code:\n        i = 1\n        i = i + 1\n        i = i + 20\n        print(i)\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 7 - Цикл while\", \"time_interval\": \"00:02:44 - 00:03:18\"}"}
{"id": 144, "rag_text": "Так это работает. Вернемся к циклу: мы обновляем i каждый раз. Цикл печатает 1, 2, 3, 4, 5. Пока i <= 5, печатаем i, затем увеличиваем i на 1. Сначала 1 — меньше 5 — печатаем. Потом i = 2, снова меньше — печатаем. И так далее.\n        code:\n        i = 1\n        while i <= 5:\n            print(i)\n            i = i + 1\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 7 - Цикл while\", \"time_interval\": \"00:03:18 - 00:04:18\"}"}
{"id": 145, "rag_text": "2 + 1 = 3. Теперь i = 3, меньше 5 — печатаем 3. 3 + 1 = 4. 4 меньше 5 — печатаем 4. 4 + 1 = 5. 5 — не меньше, но равен 5 — тоже печатаем. 5 + 1 = 6. 6 больше 5 — цикл завершён.\n        code:\n        i = 1\n        while i <= 5:\n            print(i)\n            i = i + 1\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 7 - Цикл while\", \"time_interval\": \"00:04:18 - 00:05:14\"}"}
{"id": 147, "rag_text": "Показываю бесконечный цикл: while True: print(\"hello\"), print(\"hi\"), print(\"yo\"), print(\"salem\"). Цикл бесконечный, потому что True всегда истинно.\n        code:\n        while True:\n            print(\"hello\")\n            print(\"hi\")\n            print(\"yo\")\n            print(\"salem\")\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 7 - Цикл while\", \"time_interval\": \"00:05:37 - 00:06:30\"}"}
{"id": 148, "rag_text": "Так писать нельзя — цикл идёт бесконечно. Чтобы остановить его, используем break. Удалим, подключим заново, очистим — и продолжаем. Break используется для выхода из бесконечного цикла. Цикл работает, пока True, но как только встречается break, он выходит. Пример: печатается hello, hi, yo, salem, затем break, и всё — дальше не печатает. Если убрать break, снова будет бесконечный цикл.\n        code:\n        while True:\n            print(\"hello\")\n            print(\"hi\")\n            print(\"yo\")\n            print(\"salem\")\n            break\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 7 - Цикл while\", \"time_interval\": \"00:06:30 - 00:07:05\"}"}
{"id": 149, "rag_text": "Теперь пример с continue. i = 0 while i < 10: i = i + 1 Если i % 2 == 0, то continue. Это значит: если число чётное, оно пропускается.\n        code:\n        i = 0\n        while i < 10:\n            i = i + 1\n            if i % 2 == 0:\n                continue\n            print(i)\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 7 - Цикл while\", \"time_interval\": \"00:07:05 - 00:08:02\"}"}
{"id": 150, "rag_text": "Пример: i = 0, i = i + 1, стало 1. 1 — нечётное, continue не сработает, печатаем i. Потом i = 2, 2 делится на 2 — continue срабатывает — число не печатается\n        code:\n        i = 0\n        while i < 20:\n            i = i + 1\n            if i % 2 == 0:\n                continue\n            print(i)\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 7 - Цикл while\", \"time_interval\": \"00:08:02 - 00:09:10\"}"}
{"id": 151, "rag_text": "2 делится на 2 — получается 1, остатка нет. Это чётное число, значит continue срабатывает, и всё, что после него — пропускается. Ничего не выводим. Теперь увеличим диапазон, сделаем до 20, чтобы больше чисел проверить. Смотрим результат: 1, 3, 5, 7, 9. Чётные числа пропущены, потому что только они делятся на 2 без остатка. Например, 13 на 2 без остатка не делится — получится 6.5.\n        code:\n        i = 0\n        while i < 20:\n            i = i + 1\n            if i % 2 == 0:\n                continue\n            print(i)\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 7 - Цикл while\", \"time_interval\": \"00:09:10 - 00:09:45\"}"}
{"id": 152, "rag_text": "Вот видите, когда i равен 1, 3, 5... тогда есть остаток, поэтому continue не срабатывает, и мы печатаем i. Вот так это работает. Интересный пример. Теперь главное, что ты узнал: цикл while выполняется, пока условие истинно (True). Не забывай изменять переменную i. Если не изменять i, цикл будет бесконечным. Используй break и continue в зависимости от ситуации.\n        code:\n        i = 0\n        while i < 20:\n            i = i + 1\n            if i % 2 == 0:\n                continue\n            print(i)\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 7 - Цикл while\", \"time_interval\": \"00:09:45 - 00:10:16\"}"}
{"id": 153, "rag_text": "Урок. Надеюсь, у вас всё хорошо. Сегодня мы разберём массивы. Давайте сначала быстро сравним, что мы будем проходить. Сравнение листа, сета и тюпла в Python. Лист (или массив) — это упорядоченная изменяемая коллекция, то есть просто такой список разных чисел или слов. Пишется в квадратных скобках.\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 8 - Массивы\", \"time_interval\": \"00:00:00 - 00:00:29\"}"}
{"id": 154, "rag_text": "В них можно добавлять, удалять и изменять элементы. Сейчас это подробнее разберём. Дальше идёт сет. Сет — это почти то же самое, что и лист, но есть пара отличий. Во-первых, это неупорядоченное множество. Например, если мы в листе напишем 1, 2, 3, и выведем — получим 1, 2, 3. А в сете может выйти 3, 2, 1 или 2, 1, 3 — порядок случайный.\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 8 - Массивы\", \"time_interval\": \"00:00:29 - 00:01:00\"}"}
{"id": 155, "rag_text": "То есть порядок не гарантируется — это первое отличие. Второе — в сете только уникальные элементы. Если мы напишем 1, 2, 3, 3, 4, то при выводе будет только 1, 2, 3, 4 — дубликаты удаляются.\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 8 - Массивы\", \"time_interval\": \"00:00:30 - 00:01:28\"}"}
{"id": 156, "rag_text": "Видите, если написать 3 и 3, то при выводе через print выйдет просто 1, 2, 3. То есть set — это как лист, но без порядка и без повторов. Если написать два одинаковых элемента, он один из них уберёт.\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 8 - Массивы\", \"time_interval\": \"00:01:28 - 00:01:55\"}"}
{"id": 157, "rag_text": "Тут нет повторов, как я уже сказал, и порядок не гарантируется. Например, если в листе есть 1, 2, 3, 3 и мы выводим его через print, то выйдет именно так, как написано — 1, 2, 3, 3. В сете может выйти 3, 2, 1 или 2, 1, 3 — порядка нет. Сет записывается в фигурных скобках.\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 8 - Массивы\", \"time_interval\": \"00:01:55 - 00:02:18\"}"}
{"id": 158, "rag_text": "Также есть тюпл — это то же самое, что и лист, но его нельзя менять. Он записывается в круглых скобках — например, (1, 2, 3) — и используется, когда данные не должны изменяться, например, координаты. Если в листе можно изменить значение, написав, например, вместо 2 - 6, 3 — 5, то в тюпле это не получится.\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 8 - Массивы\", \"time_interval\": \"00:02:18 - 00:02:46\"}"}
{"id": 159, "rag_text": "Если мы захотим поменять, скажем, единицу на двойку, он не даст — значение останется прежним. Если что-то уже поставлено на своё место, то изменить это нельзя. Придётся удалять весь тюпл. Вот в этом основное различие. Сейчас хочу объяснить очень важную и простую часть. Лист, тюпл и сет выглядят как контейнеры — ячейки внутри списка.\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 8 - Массивы\", \"time_interval\": \"00:02:46 - 00:03:15\"}"}
{"id": 160, "rag_text": "Например, одна ячейка содержит единицу, другая — тройку. Таких ячеек может быть сколько угодно: миллион, сто тысяч, пять, шесть — как захотите. Для примера взяли пять значений. Главное — лист — это просто набор ячеек, в каждой из которых есть значение. В нашем примере это 1, 3, 5, 7, 9. У листа, как и у сета и тюпла, есть индексы.\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 8 - Массивы\", \"time_interval\": \"00:03:15 - 00:03:44\"}"}
{"id": 161, "rag_text": "Индекс — это номер ячейки. То есть первая ячейка — это не номер 1, а номер 0. Всё всегда начинается с нуля — это важно запомнить. Например, вот эта ячейка не вторая, а под номером 1. А эта — под номером 4, потому что считаем: 0, 1, 2, 3, 4.\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 8 - Массивы\", \"time_interval\": \"00:03:44 - 00:04:05\"}"}
{"id": 162, "rag_text": "Внутри ячейки под номером 4 находится значение 9 — это так читается. Например, если мы создадим лист, назовём его, скажем, a, и присвоим ему значения, то a = [1, 3, 5, 7, 9]. Это список, и внутри него — вот эти значения. Если мы напишем print(a[2]), то какой будет результат?\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 8 - Массивы\", \"time_interval\": \"00:04:05 - 00:04:49\"}"}
{"id": 163, "rag_text": "Результат будет 5, потому что мы говорим: «Пожалуйста, выведи значение из списка a с индексом 2». А под индексом 2 у нас пятёрка. Вы правильно угадали. А если, например, написать a[0], как думаете, что выйдет?\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 8 - Массивы\", \"time_interval\": \"00:04:49 - 00:05:11\"}"}
{"id": 164, "rag_text": "Да, вы правильно угадали — это будет 1. Потому что мы обращаемся к нулевому индексу — то есть к первому элементу списка. Дальше можно делать интереснее. Например, если мы захотим в списке a под индексом 2 заменить значение, мы можем написать: a[2] = 10. То есть у нас в этом месте была пятёрка...\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 8 - Массивы\", \"time_interval\": \"00:05:11 - 00:05:37\"}"}
{"id": 165, "rag_text": "...а теперь будет десятка. Мы буквально говорим программе: «Выбрось пятёрку и положи вместо неё десятку». Просто берем и заменяем. Пятёрка удаляется. Если мы теперь напишем print(a), то увидим весь список целиком. Не значение по индексу, а весь обновлённый список. Всё правильно?\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 8 - Массивы\", \"time_interval\": \"00:05:37 - 00:06:07\"}"}
{"id": 166, "rag_text": "Вот. Предельно легко и понятно. Дальше будут примеры. Разберём лист. Пример. Как и раньше: объявляем лист, пишем внутри 1, 2, 3. У листа есть функция append, то есть прикрепить — добавим 4 в конец списка.\n        code:\n        a = [1, 2, 3]\n        a.append(4)\n        print(a)\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 8 - Массивы\", \"time_interval\": \"00:06:07 - 00:06:35\"}"}
{"id": 167, "rag_text": "После этого лист обновится и будет выглядеть как [1, 2, 3, 4]. Если его напечатать через print, выйдет этот новый список. Всё понятно, да? Теперь разберём set. Он почти как лист, но пишется в фигурных скобках.\n        code:\n        a = [1, 2, 3]\n        a.append(4)\n        print(a)\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 8 - Массивы\", \"time_interval\": \"00:06:35 - 00:07:05\"}"}
{"id": 168, "rag_text": "Как я и говорил, дубликаты в сете невозможны. Если написать 1, 2, 2, 3, то в выводе двойка будет только одна. Если добавить ещё тройку вместо однерки, то при выводе сет покажет, 2, 3 — без повторов.\n        code:\n        a = {1, 2, 2, 3}\n        print(a)\n        a = {3, 2, 2, 3}\n        print(a)\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 8 - Массивы\", \"time_interval\": \"00:07:05 - 00:07:36\"}"}
{"id": 169, "rag_text": "Потому что повторяющиеся элементы автоматически убираются. Всё просто. Теперь tuple — то же самое, что лист и сет, но без возможности изменения. Например, если в тюпле под индексом 0 попытаться заменить 1 на 10, выйдет ошибка. Нельзя так делать. Даже если написать 1, 2, 3 — нельзя ничего менять.\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 8 - Массивы\", \"time_interval\": \"00:07:36 - 00:08:03\"}"}
{"id": 170, "rag_text": "Можно только добавлять. Допустим, у нас есть список fruits, и под индексом 0 находится значение \"apple\". Да, вы угадали. А если попробовать обратиться к индексу 4 — его не существует. Потому что индексы идут: 0, 1, 2, 3. Если напишем индекс 2 — значение будет \"mango\". Всё правильно.\n        code:\n        fruits = [\"apple\", \"banana\", \"mango\", \"coconut\"]\n        print(fruits[0])\n        print(fruits[2])\n        print(fruits[4])\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 8 - Массивы\", \"time_interval\": \"00:08:03 - 00:08:36\"}"}
{"id": 171, "rag_text": "Давайте разберём функцию append, например, добавим \"kiwi\". Эта функция добавит \"kiwi\" в конец. После этого, если вывести список fruits, мы увидим уже обновлённый список. Сначала — без киви, потом — с киви.\n        code:\n        fruits = [\"apple\", \"banana\", \"mango\", \"coconut\"]\n        print(fruits)\n        fruits.append(\"kiwi\")\n        print(fruits)\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 8 - Массивы\", \"time_interval\": \"00:08:36 - 00:09:05\"}"}
{"id": 172, "rag_text": "Сначала видим: apple, banana, mango, coconut. Печатаем это. Потом используем append, который прикрепляет элемент в конец. Добавляем \"kiwi\" — и он появляется последним. Теперь разберём set.\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 8 - Массивы\", \"time_interval\": \"00:08:36 - 00:09:25\"}"}
{"id": 173, "rag_text": "Создаём set с названием colors. Пишется в фигурных скобках. Set неупорядочен, изменяем и не допускает дубликатов. Например, если добавить \"green\" и ещё раз \"green\", или дважды \"red\", то всё равно останется только по одному.\n        code:\n        colors = {\"red\", \"green\", \"blue\", \"red}\n        colors.add(\"yellow\")\n        colors.remove(\"green\")\n        print(colors)\n        colors1 [\"green\", \"green\"]\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 8 - Массивы\", \"time_interval\": \"00:09:25 - 00:10:04\"}"}
{"id": 174, "rag_text": "В листе можно добавлять одинаковые элементы. Например, два \"green\" — и они оба будут в списке. Если вывести — увидим два \"green\". А в set'е, даже если написать два \"green\" и два \"red\", то при выводе будет только по одному: red и green. Добавим, например, \"yellow\", и снова выведем.\n        colors = {\"red\", \"green\", \"green\", \"red\"}\n        print(colors)\n        colors = {\"red\", \"green\", \"yellow\", \"red}\n        print(colors)\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 8 - Массивы\", \"time_interval\": \"00:10:04 - 00:10:44\"}"}
{"id": 175, "rag_text": "Теперь видно: red, green, yellow. Но порядок может быть разным: сначала red, потом yellow, потом green — или в другом порядке. Это нормально, потому что у set'а нет фиксированного порядка.\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 8 - Массивы\", \"time_interval\": \"00:10:44 - 00:10:58\"}"}
{"id": 176, "rag_text": "А если мы работаем с массивом или листом — то там порядок есть. Будет 1, 2, 3, 4 — как написано. В set'е — нет. И даже если в set'е три одинаковых элемента — например, три \"red\" — останется только один.\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 8 - Массивы\", \"time_interval\": \"00:10:58 - 00:11:26\"}"}
{"id": 177, "rag_text": "Забыл уточнить: есть функция add. Например, удалим \"yellow\", а потом добавим его снова с помощью colors.add(\"yellow\"). Эта функция добавит \"yellow\" в set. Можно вывести до и после.\n        code:\n        colors = {\"red\", \"green\", \"blue\"}\n        print(colors)\n        colors.add(\"yellow\")\n        print(colors)\n        colors.remove(\"green\")\n        print(colors)\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 8 - Массивы\", \"time_interval\": \"00:11:26 - 00:11:54\"}"}
{"id": 178, "rag_text": "Вот так. Сделаем отступы, чтобы визуально отделить. Сначала выводим: например, green, red — порядок случайный. Потом добавляем yellow — он появляется. Далее делаем пробел и удаляем \"green\".\n        colors = {\"red\", \"green\", \"blue\"}\n        print(colors)\n        colors.add(\"yellow\")\n        print(colors)\n        colors.remove(\"green\")\n        print(colors)\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 8 - Массивы\", \"time_interval\": \"00:11:54 - 00:12:34\"}"}
{"id": 179, "rag_text": "Видите — \"green\" просто исчез. Очень полезные функции, удобно и понятно работают.\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 8 - Массивы\", \"time_interval\": \"00:12:34 - 00:12:42\"}"}
{"id": 180, "rag_text": "В этой лекции мы разберем, как работают циклы `for`, особенно в связке со списками. Это один из самых частых и полезных инструментов в программировании. Давайте рассмотрим пример. У нас есть список `fruits` с тремя элементами: яблоко, банан и апельсин. Мы используем `for` — обычную структуру, но без `range`.\n  code:\n  fruits = ['apple', 'banana', 'orange']\n  for i in fruits:\n    print(i)\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 9 - Цикл for\", \"time_interval\": \"00:00:00 - 00:00:26\"}"}
{"id": 181, "rag_text": "Сразу пишем: `for i in fruits`, и выводим `i`. То есть `i` пробегается по каждому значению в списке. Вывод: `apple`, `banana`, `orange` — всё как и ожидалось.\n  code:\n  fruits = ['apple', 'banana', 'orange']\n  for i in fruits:\n    print(i)\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 9 - Цикл for\", \"time_interval\": \"00:00:26 - 00:00:46\"}"}
{"id": 182, "rag_text": "Теперь разберем другой пример. У нас есть список `numbers` с числами. Создаем цикл `for`, пишем: `for n in numbers`. Далее — если `n != 0`, то выводим `n`. Таким образом, цикл `for` используется для фильтрации значений внутри списка. Мы выводим все значения, кроме нуля.\n  code:\n  numbers = [1, 2, 0, 4, 0, 5]\n    for n in numbers:\n      if n != 0:\n        print(n),\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 9 - Цикл for\", \"time_interval\": \"00:00:46 - 00:01:16\"}"}
{"id": 183, "rag_text": "Если `n == 0`, то его не выводим. Например: `1 2 4 5` — ноль пропускается. Также мы можем фильтровать четные числа. Пишем условие: `if n % 2 == 0`, то есть если число делится на 2 без остатка, значит оно четное. Пример: `4 / 2 = 2`, остаток — 0. Такое число будет выведено.\n  code:\n  numbers = [1, 2, 0, 4, 0, 5]\n    for n in numbers:\n      if n % 2 == 0:\n        print(n),\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 9 - Цикл for\", \"time_interval\": \"00:01:16 - 00:01:51\"}"}
{"id": 184, "rag_text": "Этот код, наоборот, выводит только четные числа. Проверим: вывод — `2, 4, 2, 2, 0, 4, 0`.\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 9 - Цикл for\", \"time_interval\": \"00:01:51 - 00:02:06\"}"}
{"id": 185, "rag_text": "Всем здравствуйте! Сегодня я покажу, что такое обработка ошибок (error handling) с помощью `try` и `except`. Давайте ближе к делу. Например, у нас есть переменная: мы запрашиваем число с помощью `int(input())` и сохраняем его в `x`. Затем мы делим 100 на `x`. Попробуем ввести, например, 7. Деление прошло успешно: 100 делится на 7.\n  code:\n  x = int(input(\"Введите число: \"))\n  print(100 / x)\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 10 - Обработка ошибок\", \"time_interval\": \"00:00:00 - 00:00:31\"}"}
{"id": 186, "rag_text": "Попробуем снова. Вводим 6544 — всё работает. Теперь введем 0. Ага, выходит ошибка! По математике на 0 делить нельзя — и в Python тоже.\n  code:\n  x = int(input(\"Введите число: \"))\n  print(100 / x)\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 10 - Обработка ошибок\", \"time_interval\": \"00:00:31 - 00:00:49\"}"}
{"id": 187, "rag_text": "Ошибка называется `ZeroDivisionError` — деление на ноль. То есть, как и в математике, делить на ноль нельзя. Также могла бы быть ошибка, если бы мы ввели не число, а, скажем, слово — например, \"хлеб\". Тогда возникла бы ошибка `ValueError`. Покажу, как это обработать. Теперь код выглядит так: `try` — попробуй выполнить этот блок, а `except` — если возникает ошибка, обработай её.\n  code:\n  try:\n    x = int(input(\"Введите число: \"))\n    print(100 / x)\n  except ZeroDivisionError:\n    print(\"На ноль делить нельзя\")\n  except ValueError:\n    print(\"Нужно ввести число\")\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 10 - Обработка ошибок\", \"time_interval\": \"00:00:49 - 00:01:31\"}"}
{"id": 188, "rag_text": "Если появляется ошибка деления на ноль, мы выводим: \"На ноль делить нельзя\". То есть вместо технической ошибки `ZeroDivisionError`, Python покажет более понятное сообщение. Если вводим текст вместо числа — покажем сообщение: \"Нужно ввести число\".\n  code:\n  try:\n    x = int(input(\"Введите число: \"))\n    print(100 / x)\n  except ZeroDivisionError:\n    print(\"На ноль делить нельзя\")\n  except ValueError:\n    print(\"Нужно ввести число\")\n\nMETADATA: {\"course_title\": \"Курс по Python для начинающих\", \"lesson\": \"Урок 10 - Обработка ошибок\", \"time_interval\": \"00:01:28 - 00:01:53\"}"}
